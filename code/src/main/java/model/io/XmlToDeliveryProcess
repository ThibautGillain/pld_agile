package model.io;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import model.data.Point;
import model.data.Segment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class XmlToDeliveryProcess{
    /**
     * ArrayList that contains DeliveryProcess that we'll send at the end of the reading
     */
    ArrayList<DeliveryProcess> Deliveries;

    pubic static void main(final String[] args)
    {
        ArrayList<DeliveryProcess> Deliver = getDeliveriesFromXml("demandeGrand9.xml");
    }

    public static ArrayList<DeliveryProcess> getDeliveriesFromXml(String url){
        Deliveries=new ArrayList<DeliveryProcess>();
        /**
         * Get an instance of class "DocumentBuilderFactory"
         */
        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            /**
             * Creation of a parser
             */
            final DocumentBuilder builder = factory.newDocumentBuilder();
            /**
             * Creation of a document
             */
            final Document document = builder.parse(new File(url));
            /**
             * Get the root Element
             */
            final Element root = document.getDocumentElement();
            /**
             * Get the DeliveryProcess tag and display the number of DeliveryProcess
             */
            final NodeList start = root.getElementsByTagName("entrepot");
            final Element startPoint = (Element) start.item(0);
            Long startAdress = Long.parseLong(startPoint.getAttribute("adresse"));
            // Recup startTime
            final NodeList deliveryList = root.getElementsByTagName("livraison");
            final int nbDeliveryElements = deliveryList.getLength();
            System.out.println(nbNodeElements);

            /**
             * Reading of all DeliveryProcess in the file and addition to the ArrayList
             */
            for (int deliveryIndex = 0; deliveryIndex < nbDeliveryElements; deliveryIndex++) {
                final Element node = (Element) deliveryList.item(nodeIndex);
                Long pickupAdress = Long.parseLong(node.getAttribute("adresseEnlevement"));
                Long deliveryAdress = Long.parseLong(node.getAttribute("adresseLivraison"));
                int pickupTime = Integer.parseInt(node.getAttribute("dureeEnlevement"));
                int deliveryTime = Integer.parseInt(node.getAttribute("dureeLivraison"));
                ActionPoint pickupPoint = new ActionPoint(pickupTime, point(), "PICK_UP");
                ActionPoint deliveryPoint = new ActionPoint(deliveryTime, point(), "DELIVERY");
                DeliveryProcess deliv = new DeliveryProcess(pickupPoint,deliveryPoint);
                Deliveries.add(deliv);
            }


        } catch (final ParserConfigurationException e) {
            e.printStackTrace();
        } catch (final SAXException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        } catch (NumberFormatException e){
            System.err.println("NumberFormatException: " + e.getMessage());
        }
        return nodes;
    }
}

    }
}
